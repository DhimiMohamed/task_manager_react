/* tslint:disable */
/* eslint-disable */
/**
 * Your API
 * API description
 *
 * The version of the OpenAPI document: v1
 * Contact: dev@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AccountsLoginCreate200Response } from '../models';
// @ts-ignore
import type { AccountsLogoutCreateRequest } from '../models';
// @ts-ignore
import type { AccountsPasswordResetRequestCreateRequest } from '../models';
// @ts-ignore
import type { AccountsPasswordResetResetPasswordCreateRequest } from '../models';
// @ts-ignore
import type { AccountsPasswordResetVerifyOtpCreateRequest } from '../models';
// @ts-ignore
import type { AccountsResendVerificationCreateRequest } from '../models';
// @ts-ignore
import type { Profile } from '../models';
// @ts-ignore
import type { TokenRefresh } from '../models';
// @ts-ignore
import type { UserLogin } from '../models';
// @ts-ignore
import type { UserRegistration } from '../models';
// @ts-ignore
import type { UserSettings } from '../models';
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Authenticate user and return JWT tokens
         * @param {UserLogin} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsLoginCreate: async (data: UserLogin, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsLoginCreate', 'data', data)
            const localVarPath = `/accounts/login/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logs out a user by blacklisting their refresh token.
         * @summary Logout user
         * @param {AccountsLogoutCreateRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsLogoutCreate: async (data: AccountsLogoutCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsLogoutCreate', 'data', data)
            const localVarPath = `/accounts/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a 6-digit OTP to the user\'s email if the email is associated with an account.
         * @summary Request password reset
         * @param {AccountsPasswordResetRequestCreateRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordResetRequestCreate: async (data: AccountsPasswordResetRequestCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsPasswordResetRequestCreate', 'data', data)
            const localVarPath = `/accounts/password-reset/request/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resets the user\'s password after OTP verification.
         * @summary Reset user password
         * @param {AccountsPasswordResetResetPasswordCreateRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordResetResetPasswordCreate: async (data: AccountsPasswordResetResetPasswordCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsPasswordResetResetPasswordCreate', 'data', data)
            const localVarPath = `/accounts/password-reset/reset-password/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verifies the 6-digit OTP sent to the user\'s email for password reset.
         * @summary Verify password reset OTP
         * @param {AccountsPasswordResetVerifyOtpCreateRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordResetVerifyOtpCreate: async (data: AccountsPasswordResetVerifyOtpCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsPasswordResetVerifyOtpCreate', 'data', data)
            const localVarPath = `/accounts/password-reset/verify-otp/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Profile} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsProfilePartialUpdate: async (data: Profile, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsProfilePartialUpdate', 'data', data)
            const localVarPath = `/accounts/profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsProfileRead: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Profile} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsProfileUpdate: async (data: Profile, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsProfileUpdate', 'data', data)
            const localVarPath = `/accounts/profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Registers a new user and creates a profile. Sends verification email.
         * @summary Register a new user
         * @param {UserRegistration} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRegisterCreate: async (data: UserRegistration, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsRegisterCreate', 'data', data)
            const localVarPath = `/accounts/register/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resend verification email to a user who has not yet verified their email.
         * @param {AccountsResendVerificationCreateRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsResendVerificationCreate: async (data: AccountsResendVerificationCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsResendVerificationCreate', 'data', data)
            const localVarPath = `/accounts/resend-verification/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsSettingsPartialUpdate: async (data: UserSettings, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsSettingsPartialUpdate', 'data', data)
            const localVarPath = `/accounts/settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsSettingsRead: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsSettingsUpdate: async (data: UserSettings, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsSettingsUpdate', 'data', data)
            const localVarPath = `/accounts/settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsTokenRefreshCreate: async (data: TokenRefresh, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsTokenRefreshCreate', 'data', data)
            const localVarPath = `/accounts/token/refresh/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verifies a user\'s email using a user ID and token provided via email.
         * @summary Verify user email
         * @param {number} userId ID of the user to verify
         * @param {string} token Verification token from email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsVerifyRead: async (userId: number, token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('accountsVerifyRead', 'userId', userId)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('accountsVerifyRead', 'token', token)
            const localVarPath = `/accounts/verify/{user_id}/{token}/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * Authenticate user and return JWT tokens
         * @param {UserLogin} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsLoginCreate(data: UserLogin, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsLoginCreate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsLoginCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsLoginCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Logs out a user by blacklisting their refresh token.
         * @summary Logout user
         * @param {AccountsLogoutCreateRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsLogoutCreate(data: AccountsLogoutCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsLogoutCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsLogoutCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sends a 6-digit OTP to the user\'s email if the email is associated with an account.
         * @summary Request password reset
         * @param {AccountsPasswordResetRequestCreateRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsPasswordResetRequestCreate(data: AccountsPasswordResetRequestCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsPasswordResetRequestCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsPasswordResetRequestCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Resets the user\'s password after OTP verification.
         * @summary Reset user password
         * @param {AccountsPasswordResetResetPasswordCreateRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsPasswordResetResetPasswordCreate(data: AccountsPasswordResetResetPasswordCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsPasswordResetResetPasswordCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsPasswordResetResetPasswordCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Verifies the 6-digit OTP sent to the user\'s email for password reset.
         * @summary Verify password reset OTP
         * @param {AccountsPasswordResetVerifyOtpCreateRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsPasswordResetVerifyOtpCreate(data: AccountsPasswordResetVerifyOtpCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsPasswordResetVerifyOtpCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsPasswordResetVerifyOtpCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Profile} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsProfilePartialUpdate(data: Profile, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsProfilePartialUpdate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsProfilePartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsProfileRead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsProfileRead(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsProfileRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Profile} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsProfileUpdate(data: Profile, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsProfileUpdate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsProfileUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Registers a new user and creates a profile. Sends verification email.
         * @summary Register a new user
         * @param {UserRegistration} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsRegisterCreate(data: UserRegistration, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsRegisterCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsRegisterCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Resend verification email to a user who has not yet verified their email.
         * @param {AccountsResendVerificationCreateRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsResendVerificationCreate(data: AccountsResendVerificationCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsResendVerificationCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsResendVerificationCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsSettingsPartialUpdate(data: UserSettings, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsSettingsPartialUpdate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsSettingsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsSettingsRead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsSettingsRead(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsSettingsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsSettingsUpdate(data: UserSettings, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsSettingsUpdate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsSettingsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsTokenRefreshCreate(data: TokenRefresh, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefresh>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsTokenRefreshCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsTokenRefreshCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Verifies a user\'s email using a user ID and token provided via email.
         * @summary Verify user email
         * @param {number} userId ID of the user to verify
         * @param {string} token Verification token from email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsVerifyRead(userId: number, token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsVerifyRead(userId, token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsVerifyRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * Authenticate user and return JWT tokens
         * @param {UserLogin} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsLoginCreate(data: UserLogin, options?: RawAxiosRequestConfig): AxiosPromise<AccountsLoginCreate200Response> {
            return localVarFp.accountsLoginCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Logs out a user by blacklisting their refresh token.
         * @summary Logout user
         * @param {AccountsLogoutCreateRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsLogoutCreate(data: AccountsLogoutCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.accountsLogoutCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a 6-digit OTP to the user\'s email if the email is associated with an account.
         * @summary Request password reset
         * @param {AccountsPasswordResetRequestCreateRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordResetRequestCreate(data: AccountsPasswordResetRequestCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.accountsPasswordResetRequestCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Resets the user\'s password after OTP verification.
         * @summary Reset user password
         * @param {AccountsPasswordResetResetPasswordCreateRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordResetResetPasswordCreate(data: AccountsPasswordResetResetPasswordCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.accountsPasswordResetResetPasswordCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Verifies the 6-digit OTP sent to the user\'s email for password reset.
         * @summary Verify password reset OTP
         * @param {AccountsPasswordResetVerifyOtpCreateRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordResetVerifyOtpCreate(data: AccountsPasswordResetVerifyOtpCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.accountsPasswordResetVerifyOtpCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Profile} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsProfilePartialUpdate(data: Profile, options?: RawAxiosRequestConfig): AxiosPromise<Profile> {
            return localVarFp.accountsProfilePartialUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsProfileRead(options?: RawAxiosRequestConfig): AxiosPromise<Profile> {
            return localVarFp.accountsProfileRead(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Profile} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsProfileUpdate(data: Profile, options?: RawAxiosRequestConfig): AxiosPromise<Profile> {
            return localVarFp.accountsProfileUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Registers a new user and creates a profile. Sends verification email.
         * @summary Register a new user
         * @param {UserRegistration} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRegisterCreate(data: UserRegistration, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.accountsRegisterCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Resend verification email to a user who has not yet verified their email.
         * @param {AccountsResendVerificationCreateRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsResendVerificationCreate(data: AccountsResendVerificationCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.accountsResendVerificationCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsSettingsPartialUpdate(data: UserSettings, options?: RawAxiosRequestConfig): AxiosPromise<UserSettings> {
            return localVarFp.accountsSettingsPartialUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsSettingsRead(options?: RawAxiosRequestConfig): AxiosPromise<UserSettings> {
            return localVarFp.accountsSettingsRead(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsSettingsUpdate(data: UserSettings, options?: RawAxiosRequestConfig): AxiosPromise<UserSettings> {
            return localVarFp.accountsSettingsUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsTokenRefreshCreate(data: TokenRefresh, options?: RawAxiosRequestConfig): AxiosPromise<TokenRefresh> {
            return localVarFp.accountsTokenRefreshCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Verifies a user\'s email using a user ID and token provided via email.
         * @summary Verify user email
         * @param {number} userId ID of the user to verify
         * @param {string} token Verification token from email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsVerifyRead(userId: number, token: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.accountsVerifyRead(userId, token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * Authenticate user and return JWT tokens
     * @param {UserLogin} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsLoginCreate(data: UserLogin, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsLoginCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Logs out a user by blacklisting their refresh token.
     * @summary Logout user
     * @param {AccountsLogoutCreateRequest} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsLogoutCreate(data: AccountsLogoutCreateRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsLogoutCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a 6-digit OTP to the user\'s email if the email is associated with an account.
     * @summary Request password reset
     * @param {AccountsPasswordResetRequestCreateRequest} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsPasswordResetRequestCreate(data: AccountsPasswordResetRequestCreateRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsPasswordResetRequestCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resets the user\'s password after OTP verification.
     * @summary Reset user password
     * @param {AccountsPasswordResetResetPasswordCreateRequest} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsPasswordResetResetPasswordCreate(data: AccountsPasswordResetResetPasswordCreateRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsPasswordResetResetPasswordCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verifies the 6-digit OTP sent to the user\'s email for password reset.
     * @summary Verify password reset OTP
     * @param {AccountsPasswordResetVerifyOtpCreateRequest} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsPasswordResetVerifyOtpCreate(data: AccountsPasswordResetVerifyOtpCreateRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsPasswordResetVerifyOtpCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Profile} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsProfilePartialUpdate(data: Profile, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsProfilePartialUpdate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsProfileRead(options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsProfileRead(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Profile} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsProfileUpdate(data: Profile, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsProfileUpdate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Registers a new user and creates a profile. Sends verification email.
     * @summary Register a new user
     * @param {UserRegistration} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsRegisterCreate(data: UserRegistration, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsRegisterCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resend verification email to a user who has not yet verified their email.
     * @param {AccountsResendVerificationCreateRequest} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsResendVerificationCreate(data: AccountsResendVerificationCreateRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsResendVerificationCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserSettings} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsSettingsPartialUpdate(data: UserSettings, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsSettingsPartialUpdate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsSettingsRead(options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsSettingsRead(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserSettings} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsSettingsUpdate(data: UserSettings, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsSettingsUpdate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {TokenRefresh} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsTokenRefreshCreate(data: TokenRefresh, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsTokenRefreshCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verifies a user\'s email using a user ID and token provided via email.
     * @summary Verify user email
     * @param {number} userId ID of the user to verify
     * @param {string} token Verification token from email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsVerifyRead(userId: number, token: string, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsVerifyRead(userId, token, options).then((request) => request(this.axios, this.basePath));
    }
}

