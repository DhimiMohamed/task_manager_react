/* tslint:disable */
/* eslint-disable */
/**
 * Your API
 * API description
 *
 * The version of the OpenAPI document: v1
 * Contact: dev@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AiTaskAssistant200Response } from '../models';
// @ts-ignore
import type { AiTaskAssistant400Response } from '../models';
// @ts-ignore
import type { AiTaskAssistant401Response } from '../models';
// @ts-ignore
import type { AiTaskAssistant500Response } from '../models';
// @ts-ignore
import type { AiTaskAssistantRequest } from '../models';
/**
 * AIAssistantApi - axios parameter creator
 * @export
 */
export const AIAssistantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Process user prompts with AI assistant that can perform task-related actions. The AI can create tasks, update task statuses, search tasks, and answer questions. Requires authentication. 
         * @param {AiTaskAssistantRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiTaskAssistant: async (data: AiTaskAssistantRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('aiTaskAssistant', 'data', data)
            const localVarPath = `/tasks/ai/task-assistant/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Convert speech in audio files to text and process with AI assistant. The AI can create tasks, update task statuses, search tasks, and answer questions. Supports MP3, WEBM, and WAV formats. Maximum file size: 25MB (default Django setting). Requires authentication. 
         * @param {File} file Audio file to transcribe (MP3, WEBM, or WAV)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voiceToText: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('voiceToText', 'file', file)
            const localVarPath = `/tasks/ai/voice-to-text/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AIAssistantApi - functional programming interface
 * @export
 */
export const AIAssistantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AIAssistantApiAxiosParamCreator(configuration)
    return {
        /**
         *  Process user prompts with AI assistant that can perform task-related actions. The AI can create tasks, update task statuses, search tasks, and answer questions. Requires authentication. 
         * @param {AiTaskAssistantRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiTaskAssistant(data: AiTaskAssistantRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AiTaskAssistant200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aiTaskAssistant(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIAssistantApi.aiTaskAssistant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *  Convert speech in audio files to text and process with AI assistant. The AI can create tasks, update task statuses, search tasks, and answer questions. Supports MP3, WEBM, and WAV formats. Maximum file size: 25MB (default Django setting). Requires authentication. 
         * @param {File} file Audio file to transcribe (MP3, WEBM, or WAV)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voiceToText(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AiTaskAssistant200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voiceToText(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIAssistantApi.voiceToText']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AIAssistantApi - factory interface
 * @export
 */
export const AIAssistantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AIAssistantApiFp(configuration)
    return {
        /**
         *  Process user prompts with AI assistant that can perform task-related actions. The AI can create tasks, update task statuses, search tasks, and answer questions. Requires authentication. 
         * @param {AiTaskAssistantRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiTaskAssistant(data: AiTaskAssistantRequest, options?: RawAxiosRequestConfig): AxiosPromise<AiTaskAssistant200Response> {
            return localVarFp.aiTaskAssistant(data, options).then((request) => request(axios, basePath));
        },
        /**
         *  Convert speech in audio files to text and process with AI assistant. The AI can create tasks, update task statuses, search tasks, and answer questions. Supports MP3, WEBM, and WAV formats. Maximum file size: 25MB (default Django setting). Requires authentication. 
         * @param {File} file Audio file to transcribe (MP3, WEBM, or WAV)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voiceToText(file: File, options?: RawAxiosRequestConfig): AxiosPromise<AiTaskAssistant200Response> {
            return localVarFp.voiceToText(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AIAssistantApi - object-oriented interface
 * @export
 * @class AIAssistantApi
 * @extends {BaseAPI}
 */
export class AIAssistantApi extends BaseAPI {
    /**
     *  Process user prompts with AI assistant that can perform task-related actions. The AI can create tasks, update task statuses, search tasks, and answer questions. Requires authentication. 
     * @param {AiTaskAssistantRequest} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIAssistantApi
     */
    public aiTaskAssistant(data: AiTaskAssistantRequest, options?: RawAxiosRequestConfig) {
        return AIAssistantApiFp(this.configuration).aiTaskAssistant(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Convert speech in audio files to text and process with AI assistant. The AI can create tasks, update task statuses, search tasks, and answer questions. Supports MP3, WEBM, and WAV formats. Maximum file size: 25MB (default Django setting). Requires authentication. 
     * @param {File} file Audio file to transcribe (MP3, WEBM, or WAV)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIAssistantApi
     */
    public voiceToText(file: File, options?: RawAxiosRequestConfig) {
        return AIAssistantApiFp(this.configuration).voiceToText(file, options).then((request) => request(this.axios, this.basePath));
    }
}

